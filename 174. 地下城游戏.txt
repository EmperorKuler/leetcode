174. 地下城游戏

一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。

骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。

有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。

为了尽快到达公主，骑士决定每次只向右或向下移动一步。

 

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
-2 (K) 	-3 	3
-5 	-10 	1
10 	30 	-5 (P)

 

说明:

    骑士的健康点数没有上限。
    任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。

class Solution {
    //正向规划，行不通
    // public int calculateMinimumHP(int[][] dungeon) {
    //     int[][] minHealth=new int[dungeon.length][dungeon[0].length];
    //     int[][] health=new int[dungeon.length][dungeon[0].length];

    //     health[0][0]=dungeon[0][0];
    //     minHealth[0][0]=health[0][0]>=0?0:health[0][0];

    //     for(int i=1;i<dungeon.length;i++){
    //         health[i][0]=health[i-1][0]+dungeon[i][0];
    //         minHealth[i][0]=Math.min(minHealth[i-1][0],health[i][0]);
    //     }
    //     for(int i=1;i<dungeon[0].length;i++){
    //         health[0][i]=health[0][i-1]+dungeon[0][i];
    //         minHealth[0][i]=Math.min(minHealth[0][i-1],health[0][i]);
    //     }

    //     for(int i=1;i<dungeon.length;i++)
    //         for(int j=1;j<dungeon[0].length;j++){
    //             if(health[i-1][j]>health[i][j-1]){
    //                 health[i][j]=health[i-1][j]+dungeon[i][j];
    //                 minHealth[i][j]=Math.min(minHealth[i-1][j],health[i][j]);
    //             }else{
    //                 health[i][j]=health[i][j-1]+dungeon[i][j];
    //                 minHealth[i][j]=Math.min(minHealth[i][j-1],health[i][j]);
    //             }
    //         }

    //     return 1-minHealth[dungeon.length-1][dungeon[0].length-1];
    // }

    //反向规划，行的通
    public int calculateMinimumHP(int[][] dungeon) {
        int[][] minHealth=new int[dungeon.length][dungeon[0].length];
        int row=dungeon.length-1;
        int col=dungeon[0].length-1;

        minHealth[dungeon.length-1][dungeon[0].length-1]=Math.max(1,1-dungeon[row][col]);

        for(int i=dungeon.length-2;i>=0;i--){
            minHealth[i][col]=Math.max(1,minHealth[i+1][col]-dungeon[i][col]);
        }
        for(int i=dungeon[0].length-2;i>=0;i--){
            minHealth[row][i]=Math.max(1,minHealth[row][i+1]-dungeon[row][i]);
        }

        for(int i=dungeon.length-2;i>=0;i--)
            for(int j=dungeon[0].length-2;j>=0;j--){
                minHealth[i][j]=Math.min(minHealth[i][j+1],minHealth[i+1][j]);
                minHealth[i][j]-=dungeon[i][j];
                minHealth[i][j]=Math.max(minHealth[i][j],1);
            }
        
        return minHealth[0][0];
    }

}
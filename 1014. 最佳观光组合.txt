1014. 最佳观光组合

给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。

一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。

返回一对观光景点能取得的最高分。

 

示例：

输入：[8,1,5,2,6]
输出：11
解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11

 

提示：

    2 <= A.length <= 50000
    1 <= A[i] <= 1000

class Solution {
    // public int maxScoreSightseeingPair(int[] A) {
    //     int max=Integer.MIN_VALUE,max1=Integer.MIN_VALUE;
    //     for(int i=0;i<A.length;i++){
    //         max1=Integer.MIN_VALUE;
    //         int min=Math.min(A.length,i+A[i]+1);
    //         for(int j=i+1;j<min;j++)
    //             max1=Math.max(max1,A[j]-j);
    //         max=Math.max(max1+A[i]+i,max);
    //     }
    //     return max;
    // }

    //惊呆了，A[i] + A[j] + i - j，i与j可以分割开，成A[i] + i， A[j] - j，因此对 j 求答案的时候，由于 A[j]−j是固定不变的，因此最大化 A[i]+i+A[j]−j的值其实就等价于求 [0,j−1]中 A[i]+i的最大值 max，景点 j 的答案即为 max+A[j]−j,一次遍历即可求得 
    public int maxScoreSightseeingPair(int[] A) {
        int max=Integer.MIN_VALUE,result=Integer.MIN_VALUE;
        for(int k=1;k<A.length;k++){
            max=Math.max(A[k-1]+(k-1),max);
            result=Math.max(A[k]-k+max,result);
        }
        return result;         
    }
}
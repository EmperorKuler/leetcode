146. LRU缓存机制

运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果关键字 (key) 存在于缓存中，则获取关键字的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字/值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。

 

进阶:

你是否可以在 O(1) 时间复杂度内完成这两种操作？

 

示例:

LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得关键字 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得关键字 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4

class LRUCache {
    Map<Integer,MyNode> map=new HashMap<>();
    int num=0;
    int capacity;
    MyNode myfinal;
    MyNode myfirst;

    public LRUCache(int capacity) {
        this.capacity=capacity;
    }
    
    public int get(int key) {
        MyNode result=map.get(key);
        if(result==null) return -1;

        if(this.myfirst!=result){
            result.last.next=result.next;
            if(this.myfinal!=result)
                result.next.last=result.last;
            else this.myfinal=this.myfinal.last;
            result.next=this.myfirst;
            this.myfirst.last=result;
            this.myfirst=result;
        }
        return result.myVal;
    }
    
    public void put(int key, int value) {
        MyNode result=map.get(key);
        if(result!=null){
            if(this.myfirst!=result){
                result.last.next=result.next;
                if(this.myfinal!=result)
                    result.next.last=result.last;
                else this.myfinal=this.myfinal.last;
                result.next=this.myfirst;
                this.myfirst.last=result;
                result.last=null;
                this.myfirst=result;
            }
            result.myVal=value;
            return ;
        } 
        if(this.num==this.capacity){
            MyNode newNode=new MyNode(key,value,null,this.myfirst);
            map.remove(this.myfinal.myKey);
            if(this.capacity==1){
                this.myfinal=this.myfirst=newNode;
            }else{
                this.myfirst.last=newNode;
                this.myfirst=newNode;
                myfinal=myfinal.last;
            }
            map.put(key,newNode);
        }else{    
            MyNode newNode=new MyNode(key,value,null,this.myfirst);       
            if(this.num==0){
                this.myfinal=this.myfirst=newNode;
            }else{
                this.myfirst.last=newNode;
                this.myfirst=newNode;
            }
            map.put(key,newNode);
            this.num++;
        }
    }

    class MyNode{
        int myKey;
        int myVal;
        MyNode last;
        MyNode next;

        public MyNode(int key,int value,MyNode last,MyNode next){
            this.myKey=key;
            this.myVal=value;
            this.last=last;
            this.next=next;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
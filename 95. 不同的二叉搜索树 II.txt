95. 不同的二叉搜索树 II

给定一个整数 n，生成所有由 1 ... n 为节点所组成的 二叉搜索树 。

 

示例：

输入：3
输出：
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释：
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

 

提示：

    0 <= n <= 8

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {    
    //方法1，类似动态规划，新的数字i所在节点分别为根，右1，右2..时，数字i-1的所有解的子树只能在其左边，即新节点数值最大，所有他所在节点的可能性只能是树的最右边所有情况
    // public List<TreeNode> generateTrees(int n) {
    //     if(n==0) return new ArrayList<>();
    //     List<TreeNode> list1=new ArrayList<>(){{add(new TreeNode(1));}};
    //     List<TreeNode> list2=new ArrayList<>();
    //     TreeNode newNode;
    //     for(int i=2;i<=n;i++){
    //         for(TreeNode root1:list1){
    //             int count=0;
    //             boolean flag=false;
    //             while(!flag){
    //                 TreeNode newRoot1=copy(root1);
    //                 TreeNode now=newRoot1;
    //                 if(now.right!=null)
    //                     for(int j=count;j>0;j--) {
    //                         now=now.right;
    //                         if(now.right==null) flag=true;
    //                     }
    //                 else flag=true;

    //                 newNode=new TreeNode(i);
    //                 newNode.left=now.right;
    //                 now.right=newNode;
    //                 list2.add(newRoot1);
    //                 count++;
    //             }
    //             newNode=new TreeNode(i);
    //             newNode.left=root1;
    //             list2.add(newNode);
    //         }
    //         list1=list2;
    //         list2=new ArrayList<>();
    //     }
    //     return list1;
    // }

    //递归算法，比某个节点小的值肯定在左边，比他大的肯定在右边，不断递归
     public List<TreeNode> generateTrees(int n) {
        if(n==0) return new ArrayList<>();
        return getTrees(1,n);
    }

    List<TreeNode> getTrees(int i, int j){
        List<TreeNode> list=new ArrayList<>();
        if(i>j){
            list.add(null);
            return list;
        }
        for(int m=i;m<=j;m++){
            List<TreeNode> listLeft=getTrees(i,m-1);
            List<TreeNode> listRight=getTrees(m+1,j);
            for(TreeNode left:listLeft){
                for(TreeNode right:listRight){
                    TreeNode node=new TreeNode(m);
                    node.left=copy(left);
                    node.right=copy(right);
                    list.add(node);
                }
            }
        }
        return list;
    }

    TreeNode copy(TreeNode root){
        if(root==null) return null;
        TreeNode newRoot=new TreeNode(root.val);
        LinkedList<TreeNode> queue=new LinkedList<>();
        LinkedList<TreeNode> newQueue=new LinkedList<>();
        queue.add(root);
        newQueue.add(newRoot);
        while(!queue.isEmpty()){
            TreeNode node=queue.pollFirst();
            TreeNode newNode=newQueue.pollFirst();
            if(node.left!=null){
                newNode.left=new TreeNode(node.left.val);
                queue.addLast(node.left);
                newQueue.addLast(newNode.left);
            }
            if(node.right!=null){
                newNode.right=new TreeNode(node.right.val);
                queue.addLast(node.right);
                newQueue.addLast(newNode.right);
            }
        }
        return newRoot;
    }
}
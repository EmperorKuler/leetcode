87. 扰乱字符串

给定一个字符串 s1，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。

下图是字符串 s1 = "great" 的一种可能的表示形式。

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t

在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。

例如，如果我们挑选非叶节点 "gr" ，交换它的两个子节点，将会产生扰乱字符串 "rgeat" 。

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t

我们将 "rgeat” 称作 "great" 的一个扰乱字符串。

同样地，如果我们继续交换节点 "eat" 和 "at" 的子节点，将会产生另一个新的扰乱字符串 "rgtae" 。

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a

我们将 "rgtae” 称作 "great" 的一个扰乱字符串。

给出两个长度相等的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。

示例 1:

输入: s1 = "great", s2 = "rgeat"
输出: true

示例 2:

输入: s1 = "abcde", s2 = "caebd"
输出: false

class Solution {
    ////我的方法，纯递归
    // public boolean isScramble(String s1, String s2) {
    //     if(s1.length()<=1) {
    //         if(s1.equals(s2))
    //             return true;
    //         else return false;
    //     }
    //     Map<Character,LinkedList<Integer>> maxMap=new HashMap<>();
    //     Map<Character,LinkedList<Integer>> minMap=new HashMap<>();
    //     for(int i=0;i<s1.length();i++){
    //         char c=s1.charAt(i);
    //         if(maxMap.get(c)==null){
    //             LinkedList<Integer> list=new LinkedList<>();
    //             list.add(i);
    //             maxMap.put(c,list);
    //             list=new LinkedList<>();
    //             list.add(i);
    //             minMap.put(c,list);
    //         }else{
    //             maxMap.get(c).add(i);
    //             minMap.get(c).add(i);
    //         }
    //     }

    //     int max=0,min=Integer.MAX_VALUE;
    //     for(int i=0;i<s1.length()-1;i++){
    //         char c=s2.charAt(i);
    //         LinkedList<Integer> maxlist=maxMap.get(c);
    //         LinkedList<Integer> minlist=minMap.get(c);
    //         if(maxlist==null||minlist==null||maxlist.isEmpty()||minlist.isEmpty()) return false;
    //         min=Math.min(min,maxlist.pollLast());
    //         max=Math.max(max,minlist.pollFirst());

    //         int length=s1.length();
    //         boolean flag=false;
    //         if(max==i) {
    //             flag=flag||(isScramble(s1.substring(0,i+1),s2.substring(0,i+1))&&isScramble(s1.substring(i+1,length),s2.substring(i+1,length)));
    //         }
    //         if(min==length-i-1) flag=flag||isScramble(s1.substring(length-i-1,s1.length()),s2.substring(0,i+1))&&isScramble(s1.substring(0,length-i-1),s2.substring(i+1,s1.length()));
    //         if(flag) return true;
    //     }
    //     return false;
    // }

    //动态规划,居然比我的慢
    //dp[i][j][k][h] 表示T[k..h] 是否由S[i..j] 变来。由于变换必须长度是一样的，因此这边有个关系 j−i=h−k,可以把四维数组降成三维。dp[i][j][len]表示从字符串 S 中 i 开始长度为 len的字符串是否能变换为从字符串 T 中 j 开始长度为 len 的字符串
    public boolean isScramble(String s1, String s2) {
        int n=s1.length();
        if(n!=s2.length()) return false;
        if(n==0) return true;
        boolean[][][] dp=new boolean[n][n][n+1];
        char[] cs1=s1.toCharArray();
        char[] cs2=s2.toCharArray();

        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                dp[i][j][1]=cs1[i]==cs2[j];

        for(int k=2;k<=n;k++)
            for(int i=0;i<n;i++)
                for(int j=0;j<n;j++){
                    if(i+k>n||j+k>n) break;
                    for(int r=1;r<k;r++){
                        if((dp[i][j][r]&&dp[i+r][j+r][k-r])||(dp[i][j+k-r][r]&&dp[i+r][j][k-r])){
                            dp[i][j][k]=true;
                            break;
                        }
                    }
                }
        return dp[0][0][n];
    }
}
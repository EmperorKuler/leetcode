81. 搜索旋转排序数组 II

假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。

编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

示例 1:

输入: nums = [2,5,6,0,0,1,2], target = 0
输出: true

示例 2:

输入: nums = [2,5,6,0,0,1,2], target = 3
输出: false

进阶:

    这是 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。
    这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？

class Solution {
    int[] nums;
    int target;
    public boolean search(int[] nums, int target) {
        this.nums=nums;
        this.target=target;
        return search2(0,nums.length-1);
    }

    public boolean search2(int i, int j){
        // //优化前，这不叫二分，只是分段遍历，其实会遍历每一个数直至找到
        // if(j<i) return false;
        // int k=(i+j)/2;
        // if(this.nums[k]==this.target||this.nums[i]==this.target||this.nums[j]==this.target) return true;
        // return search2(i+1,k-1)||search2(k+1,j-1);

        //优化后，判断有没有可能再二分
        if(j<i) return false;
        int k=(i+j)/2;
        if(this.nums[k]==this.target||this.nums[i]==this.target||this.nums[j]==this.target) return true;
        boolean flag=false;
        if(this.nums[k]<this.nums[i]){
            if(this.nums[k]>this.target||this.nums[i]<this.target) flag=flag||search2(i+1,k-1);
            if(this.nums[k]<this.target&&this.nums[j]>this.target) flag=flag||search2(k+1,j-1);
        }else if(this.nums[k]>this.nums[i]){
            if(this.nums[k]<this.target||this.nums[j]>this.target) flag=flag||search2(k+1,j-1);
            if(this.nums[i]<this.target&&this.nums[k]>this.target) flag=flag||search2(i+1,k-1);
        }else flag=flag||search2(i+1,k-1)||search2(k+1,j-1); //等于很关键，比如[1,3,1,1,1]
        return flag;
    }
}
57. 插入区间

给出一个无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

示例 1:

输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
输出: [[1,5],[6,9]]

示例 2:

输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出: [[1,2],[3,10],[12,16]]
解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。

代码：
class Solution {
    // public int[][] insert(int[][] intervals, int[] newInterval) {
    //     List<int[]> container=new ArrayList<>();
    //     if(intervals.length==0){
    //         container.add(newInterval);
    //         return container.toArray(new int[0][]);
    //     }
    //     int left=-1;
    //     int i=1;
    //     if(intervals[0][0]<=newInterval[0]){
    //         left=0;
    //         for(;i<intervals.length;i++){
    //             if(intervals[i-1][0]<=newInterval[0]&&intervals[i][0]>newInterval[0]){
    //                 left=i-1;
    //                 break;
    //             }
    //             else{
    //                 container.add(intervals[i-1]);
    //             }
    //         }
    //     }
    //     if(intervals.length!=1&&i==intervals.length){
    //         left=intervals.length-1;
    //     }
    //     int right=left-1;
    //     i=0;
    //     if(intervals[0][1]<newInterval[1]){
    //         for(;i<intervals.length-1;i++){
    //             if(intervals[i][1]<newInterval[1]&&intervals[i+1][1]>=newInterval[1]){
    //                 right=i;
    //                 break;
    //             }
    //         }
    //     }     
    //     if(intervals.length!=1&&i==intervals.length-1){
    //         right=intervals.length-1;
    //     }
    //     int numleft=0,numright=0;
    //     i=-1;
    //     if(left==-1){
    //         numleft=newInterval[0];
    //     }else if(left==intervals.length-1){
    //         if(intervals[left][1]>=newInterval[0]) container.add(new int[]{intervals[left][0],Math.max(newInterval[1],intervals[left][1])});
    //         else{
    //             container.add(intervals[left]);
    //             container.add(newInterval);
    //         }
    //         return container.toArray(new int[0][]);
    //     }else{
    //         if(intervals[left][1]>=newInterval[0]) numleft=intervals[left][0];
    //         else{
    //             container.add(intervals[left]);
    //             numleft=newInterval[0];
    //         }
    //     }

    //     if(right<0){
    //         if(newInterval[1]>=intervals[0][0]){
    //             numright=Math.max(intervals[0][1],newInterval[1]);
    //             i=1;
    //         }else{
    //             i=0;
    //             numright=newInterval[1];
    //         }
    //     }else if(right==intervals.length-1){
    //         numright=newInterval[1];
    //         i=intervals.length;
    //     }else{
    //         if(intervals[right+1][0]>newInterval[1]){
    //             i=right+1;
    //             numright=newInterval[1];
    //         }else{
    //             i=right+2;
    //             numright=intervals[right+1][1];
    //         }
    //     }
    //     container.add(new int[]{numleft,numright});
    //     for(;i<intervals.length;i++){
    //        container.add(intervals[i]);
    //     }
    //     return container.toArray(new int[0][]);
    // }

    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> container=new ArrayList<>();
        if(intervals.length==0){
            container.add(newInterval);
            return container.toArray(new int[0][]);
        }
        int memo=-1;
        int i=0;
        int[] middle=new int[2];
        if(intervals[0][0]<=newInterval[0]){
            for(;i<intervals.length;i++){
                if(intervals[i][0]<=newInterval[0]&&intervals[i][1]>=newInterval[0]){
                    middle[0]=intervals[i][0];
                    memo=i;
                    break;
                }else if(intervals[i][1]<newInterval[0]&&(i+1==intervals.length||intervals[i+1][0]>newInterval[0])){
                    container.add(intervals[i]);
                    middle[0]=newInterval[0];
                    memo=i;
                    break;
                }
                else{
                    container.add(intervals[i]);
                }
            }
        }else{
            middle[0]=newInterval[0];
        }
        if(memo==-1&&intervals[0][0]>newInterval[1]){
            middle[1]=newInterval[1];
            memo=0;
        }else{
            i=memo==-1?0:memo;
            for(;i<intervals.length;i++){
                if(intervals[i][0]<=newInterval[1]&&intervals[i][1]>=newInterval[1]){
                    middle[1]=intervals[i][1];
                    memo=i+1;
                    break;
                }else if(intervals[i][1]<newInterval[1]&&(i+1==intervals.length||intervals[i+1][0]>newInterval[1])){
                    middle[1]=newInterval[1];
                    memo=i+1;
                    break;
                }
            }
        }
        container.add(middle);
        for(;memo<intervals.length;memo++) container.add(intervals[memo]);
        return container.toArray(new int[0][]);
    }
}
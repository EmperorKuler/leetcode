128. 最长连续序列

给定一个未排序的整数数组，找出最长连续序列的长度。

要求算法的时间复杂度为 O(n)。

示例:

输入: [100, 4, 200, 1, 3, 2]
输出: 4
解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。

class Solution {
    // //我的方法，采用并查集，对所有数字遍历，并创建起始map与结束map，以数a起始数b结束的一段连续序列指向同一段list，该list存储着这一段序列，每当遍历到nums的一个新数字时，判断是不是在某一段的前一个或后一个，如果是，加入段中并更新这一段的start与end map，在这个过程中某些段可能会合并成一个段，总的来说比较复杂
    // public int longestConsecutive(int[] nums) {
    //     Map<Integer,Integer> start=new HashMap<>();
    //     Map<Integer,Integer> end=new HashMap<>();
    //     List<List<Integer>> list=new ArrayList<>();
    //     int count=0;
    //     for(int num:nums){
    //         Integer startIndex=start.get(num);
    //         Integer endIndex=end.get(num); 

    //         if(endIndex!=null||startIndex!=null) continue;////代表数字重复了

    //         endIndex=end.get(num-1);
    //         startIndex=start.get(num+1);


    //         if(endIndex!=null&&startIndex!=null){
    //             List<Integer> startList=list.get(startIndex);
    //             List<Integer> endList=list.get(endIndex);
    //             endList.add(num);
    //             endList.addAll(startList);
    //             list.set(startIndex,endList);
    //             end.put(startList.get(startList.size()-1),startIndex);
    //             end.put(num-1,-1);//除了段首段尾之外，其它数字指向的list索引皆为-1
    //             start.put(num,-1);
    //             end.put(num,-1);
    //             start.put(num+1,-1);
    //         }else if(endIndex==null&&startIndex!=null){
    //             List<Integer> newStartList=new ArrayList<>();
    //             newStartList.add(num);
    //             List<Integer> startList=list.get(startIndex);
    //             newStartList.addAll(startList);
    //             list.set(startIndex,newStartList);
    //             start.put(num,startIndex);
    //             start.put(num+1,-1);
    //             end.put(num,-1);
    //             end.put(startList.get(startList.size()-1),startIndex);
    //         }else if(endIndex!=null&&startIndex==null){
    //             list.get(endIndex).add(num);
    //             end.put(num-1,-1);
    //             end.put(num,endIndex);
    //         }else{
    //             List<Integer> newList=new ArrayList<>();
    //             newList.add(num);
    //             list.add(newList);
    //             start.put(num,count);
    //             end.put(num,count);
    //             count++;
    //         }
    //     }

    //     int max=0;
    //     for(List<Integer> l:list){
    //         max=Math.max(max,l.size());
    //     }
    //     return max;
    // }

    //答案方法，hashset,简单了很多，没有hashlist一说，因为list中会出现重复数值
    //直接对于某个数a，查找是不是存在下一个a+1就行了，因为hashset时间o(1)
    //在此之前先判断是不是存在a-1，若存在，则不必查找了，因为该行为已在数字a-1时完成了
    public int longestConsecutive(int[] nums) {
        Set<Integer> set=new HashSet<>();
        for(int num:nums)
            set.add(num);
        int max=0;
        int count=0;
        for(int num:set){
            if(!set.contains(num-1)){
                count=0;
                while(set.contains(num)){
                    count++;
                    num++;
                }
                max=Math.max(count,max);
            }
        }
        return max;
    }
}
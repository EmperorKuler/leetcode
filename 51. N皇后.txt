51. N皇后

n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。即任一横竖斜线上只有一个皇后

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

示例:

输入: 4
输出: [
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。

代码：
class Solution {
    boolean[] col;
    boolean[] left;
    boolean[] right;
    String[][] result;

    public List<List<String>> solveNQueens(int n) {
        col=new boolean[n];
        left=new boolean[2*n-1];
        right=new boolean[2*n-1];
        result=new String[n][n];
        for(String[] ss:result) Arrays.fill(ss,".");
        return doRow(0,n);
    }

    public List<List<String>> doRow(int k, int n){
        List<List<String>> list=new LinkedList<>();
        if(k==n){
            List<String> l=new LinkedList<>();
            for(String[] ss:result){
                StringBuilder sb=new StringBuilder("");
                for(String s:ss) sb.append(s);
                l.add(sb.toString());
            }
            list.add(l);
            return list;
        }

        for(int i=0;i<n;i++){
            int kleft=n-1-k+i,kright=i+k;
            if(col[i]||left[kleft]||right[kright]) continue;
            col[i]=left[kleft]=right[kright]=true;
            result[k][i]="Q";
            list.addAll(doRow(k+1,n));
            col[i]=left[kleft]=right[kright]=false;
            result[k][i]=".";
        }
        return list;
    }
}

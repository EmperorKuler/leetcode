990. 等式方程的可满足性

给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一："a==b" 或 "a!=b"。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。
只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 
 
示例 1：

输入：["a==b","b!=a"]
输出：false
解释：如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。

示例 2：

输出：["b==a","a==b"]
输入：true
解释：我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。

示例 3：

输入：["a==b","b==c","a==c"]
输出：true

示例 4：

输入：["a==b","b!=c","c==a"]
输出：false

示例 5：

输入：["c==c","b==d","x!=z"]
输出：true

提示：

    1 <= equations.length <= 500
    equations[i].length == 4
    equations[i][0] 和 equations[i][3] 是小写字母
    equations[i][1] 要么是 '='，要么是 '!'
    equations[i][2] 是 '='

解答：
//答案直接比较根，就是相等的两个其中一个会指向另一个，例如a=b,b会指向a,对于c=b,c指向b,因此判断d与b是否相等，就要判断d与b是否指向了同一个根，很巧妙，直接用个26位数组即可
class Solution {
    public boolean equationsPossible(String[] equations) {
        List<Character>[] num=new List[26];
        int[] get=new int[26];
        int memo=equations.length,now=0;
        for(;now<memo;){
            String s=equations[now];
            int left=s.charAt(0)-'a';
            int right=s.charAt(3)-'a';
            if(s.charAt(1)=='='){                
                if(left==right) {
                    now++;
                    continue;
                }
                if(num[left]==null&&num[right]==null){
                    num[left]=num[right]=new LinkedList<Character>();
                    num[left].add(s.charAt(0));//每个num[i]持有的链条包括自身,因此left=right时需额外判断，否则会重复值
                    num[left].add(s.charAt(3));
                } else if(num[left]==null&&num[right]!=null){
                    num[left]=num[right];
                    num[left].add(s.charAt(0));
                } else if(num[left]!=null&&num[right]==null){
                    num[right]=num[left];
                    num[left].add(s.charAt(3));
                } else if(num[left]!=num[right]){
                    num[left].addAll(num[right]);
                    for(Character c :num[right]) num[c-'a']=num[left];  //关键点，我们不仅要修改num[right]=num[left],还要修改所有与num[right]指向同一list的num也指向num[left]
                }
                now++;
            }else{
                if(left==right) return false;
                equations[now]=equations[memo-1];
                equations[memo-1]=s;
                memo--;
            }
        }
        Map<List<Character>,Boolean> map=new HashMap<>();
        now=1;
        for(List<Character> list:num){
            if(list==null||map.get(list)!=null) continue;
            else{
                map.put(list,true);
                for(Character c:list){
                    get[c-'a']=now;
                }
                now++;
            }
        }
        for(;memo<equations.length;memo++){
            int left=equations[memo].charAt(0)-'a';
            int right=equations[memo].charAt(3)-'a';
            if(get[left]==get[right]&&get[left]!=0) return false;
        }
        return true;
    }
}

31. 下一个排列

实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须 原地 修改，只允许使用额外常数空间。

 

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]

示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]

示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]

示例 4：

输入：nums = [1]
输出：[1]


class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length<2) return ;

        int i=nums.length-2,j=nums.length-1;
        while(i!=0){
            if(nums[i]>=nums[j]){
                i--;j--;
            }else{
                break;
            }
        }

        if(i==0&&nums[i]>=nums[j]){
            Arrays.sort(nums);
            return ;
        } 

        int remember;
        boolean flag=true;

        int p=j,q=nums.length-1;

        while(p<q){
            remember=nums[p];
            nums[p]=nums[q];
            nums[q]=remember;

            if(flag&&nums[p]>nums[i]){
                flag=false;
                remember=nums[i];
                nums[i]=nums[p];
                nums[p]=remember;
            }
            p++;q--;
        }

        if(flag){
            while(p<nums.length&&nums[p]<=nums[i]){
                p++;
            }
            remember=nums[i];
            nums[i]=nums[p];
            nums[p]=remember;
        }
    }
}
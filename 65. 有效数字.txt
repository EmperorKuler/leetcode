65. 有效数字

验证给定的字符串是否可以解释为十进制数字。

例如:

"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

说明: 我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。这里给出一份可能存在于有效十进制数字中的字符列表：

    数字 0-9
    指数 - "e"
    正/负号 - "+"/"-"
    小数点 - "."

当然，在输入中，这些字符的上下文也很重要。


class Solution {
    //蠢方法，直接干
    // public boolean isNumber(String s) {
    //     int i=0;
    //     while(i<s.length()&&s.charAt(i)==' ') i++;
    //     if(i==s.length()) return false;
    //     boolean flag=false;
    //     char c=s.charAt(i);
    //     if(c=='-'||c=='+') i++;
    //     if(s.length()<=i||((s.charAt(i)<'0'||s.charAt(i)>'9')&&s.charAt(i)!='.')) return false;
    //     if(s.charAt(i)=='.') {
    //         if(s.length()<i+2||s.charAt(i+1)<'0'||s.charAt(i+1)>'9') return false;
    //         flag=true;
    //     }
    //     i++;
    //     while(i<s.length()){
    //         c=s.charAt(i);
    //         if(c=='.') {
    //             if(flag) return false;
    //             flag=true;
    //         }
    //         else if(c=='e') break;
    //         else if(c==' ') break;
    //         else if(c<'0'||c>'9') return false;
    //         i++;
    //     }
    //     if(i==s.length()) return true;
    //     if(c=='e'){
    //         i++;
    //         if(i==s.length()) return false;
    //         if(s.charAt(i)=='-'||s.charAt(i)=='+') i++;
    //         if(s.length()<=i||s.charAt(i)<'0'||s.charAt(i)>'9') return false;
    //         i++;
    //         while(i<s.length()){
    //             c=s.charAt(i);
    //             if(c==' ') break;
    //             if(c=='.'||c<'0'||c>'9') return false;
    //             i++;
    //         }
    //         if(i==s.length())
    //             return true;
    //     }
    //     if(c==' ') {
    //         i++;
    //         while(i<s.length()){
    //             if(s.charAt(i)!=' ') return false;
    //             i++;
    //         }
    //         return true;
    //     }
    //     return false;
    // }


    //尖端方法，表驱动法
    public int make(char c) {
        switch(c) {
            case ' ': return 0;
            case '+':
            case '-': return 1;
            case '.': return 3;
            case 'e': return 4;
            default:
                if(c >= 48 && c <= 57) return 2;
        }
        return -1;
    }
    
    public boolean isNumber(String s) {
        int state = 0;
        int finals = 0b101101000;
        int[][] transfer = new int[][]{{ 0, 1, 6, 2,-1},
                                       {-1,-1, 6, 2,-1},
                                       {-1,-1, 3,-1,-1},
                                       { 8,-1, 3,-1, 4},
                                       {-1, 7, 5,-1,-1},
                                       { 8,-1, 5,-1,-1},
                                       { 8,-1, 6, 3, 4},
                                       {-1,-1, 5,-1,-1},
                                       { 8,-1,-1,-1,-1}};//写成static更佳
        char[] ss = s.toCharArray();
        for(int i=0; i < ss.length; ++i) {
            int id = make(ss[i]);
            if (id < 0) return false;
            state = transfer[state][id];
            if (state < 0) return false;
        }
        return (finals & (1 << state)) > 0;
    }
}
99. 恢复二叉搜索树

二叉搜索树中的两个节点被错误地交换。

请在不改变其结构的情况下，恢复这棵树。

示例 1:

输入: [1,3,null,null,2]

   1
  /
 3
  \
   2

输出: [3,1,null,null,2]

   3
  /
 1
  \
   2

示例 2:

输入: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

输出: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3

进阶:

    使用 O(n) 空间复杂度的解法很容易实现。
    你能想出一个只使用常数空间的解决方案吗？

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //二叉搜索树左序遍历应该是递增的，因此左序遍历找出两个不和谐的点即可第一个比下一个大，第二个比上一个小
 //答案莫里斯子树实现了o(1)
class Solution {
    public void recoverTree(TreeNode root) {
        Stack<TreeNode> stack=new Stack<>();
        TreeNode last=new TreeNode(0);
        int value=Integer.MIN_VALUE;

        TreeNode now=root.left;
        stack.push(root);

        while(!stack.isEmpty()||now!=null){
            if(now!=null){
                stack.push(now);
                now=now.left;
            }else{
                now=stack.pop();
                if(now.val>=value){
                    last=now;
                    value=now.val;
                }else break;
                now=now.right;
            }
        }
        TreeNode next=now;
        value=now.val;
        now=now.right;

        while(!stack.isEmpty()||now!=null){
            if(now!=null){
                stack.push(now);
                now=now.left;
            }else{
                now=stack.pop();
                if(now.val>value) value=now.val;
                else break;
                now=now.right;
            }
        }

        if(now==null) now=next;
        value=now.val;
        now.val=last.val;
        last.val=value;
    }
}